// <auto-generated />
using CityInfo.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CityInfo.API.Migrations
{
    [DbContext(typeof(CitiesInfoContext))]
    [Migration("20190611055708_initial_db_setup")]
    partial class initial_db_setup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CityInfo.API.Entity.Cities", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int>("CountryID");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(255);

                    b.HasKey("CityID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityID = 1,
                            CityName = "Calcutta",
                            CountryID = 1,
                            ShortDescription = "some description"
                        },
                        new
                        {
                            CityID = 2,
                            CityName = "Melbourne",
                            CountryID = 2,
                            ShortDescription = "Melbourne description"
                        },
                        new
                        {
                            CityID = 3,
                            CityName = "Tula",
                            CountryID = 3,
                            ShortDescription = "Tula description"
                        });
                });

            modelBuilder.Entity("CityInfo.API.Entity.Countries", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SomeDetails")
                        .HasMaxLength(255);

                    b.HasKey("CountryID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryID = 1,
                            CountryName = "India",
                            SomeDetails = "Empty"
                        },
                        new
                        {
                            CountryID = 2,
                            CountryName = "Australia",
                            SomeDetails = "Empty"
                        },
                        new
                        {
                            CountryID = 3,
                            CountryName = "Russia",
                            SomeDetails = "Empty"
                        });
                });

            modelBuilder.Entity("CityInfo.API.Entity.Cities", b =>
                {
                    b.HasOne("CityInfo.API.Entity.Countries", "Coutries")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
